import pandas as pd
import random

L = [10, 20, 30, 40, 50, 60, 70, 80]

L.extend([200, 300])
print(f"i. {L}")

L.remove(10)
L.remove(30)
print(f"ii. {L}")

L.sort()
print(f"iii. {L}")

L.sort(reverse=True)
print(f"iv. {L}")

scores = (45, 89.5, 76, 45.4, 89, 92, 58, 45)

max_score = max(scores)
max_index = scores.index(max_score)
print(f"i. Highest: {max_score} at {max_index}")

min_score = min(scores)
min_count = scores.count(min_score)
print(f"ii. Lowest: {min_score} appears {min_count} times")

reversed_list = list(scores[::-1])
print(f"iii. Reversed as list: {reversed_list}")

user_score = 76
if user_score in scores:
    print(f"iv. {user_score} found at index {scores.index(user_score)}")
else:
    print(f"iv. {user_score} not found")

random_numbers = [random.randint(100, 900) for _ in range(100)]
odds = [x for x in random_numbers if x % 2 != 0]
evens = [x for x in random_numbers if x % 2 == 0]

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n**0.5)+1):
        if n % i == 0:
            return False
    return True

primes = [x for x in random_numbers if is_prime(x)]
print(f"i. Odd numbers count: {len(odds)}")
print(f"ii. Even numbers count: {len(evens)}")
print(f"iii. Prime numbers count: {len(primes)}")

A = {34, 56, 78, 90}
B = {78, 45, 90, 23}

print(f"i. Union: {A.union(B)}")
print(f"ii. Intersection: {A.intersection(B)}")
print(f"iii. Symmetric difference: {A.symmetric_difference(B)}")
print(f"iv. A subset of B: {A.issubset(B)}")
print(f"iv. B superset of A: {B.issuperset(A)}")

X = 56
if X in A:
    A.remove(X)
    print(f"v. Removed {X} from A: {A}")
else:
    print(f"v. {X} not in A")

sample_dict = {
    "name": "Kelly",
    "age": 25,
    "salary": 8000,
    "city": "New york"
}

sample_dict["location"] = sample_dict.pop("city")
print(sample_dict)
